# -*- coding: utf-8 -*-
"""GDP project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FnQaMa_8XUEI9rpihO8TsZTJIl4Wnk94
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

df=pd.read_excel('/content/drive/MyDrive/USA GDP Growth 1961-2021.xlsx')

# Remove special characters and convert to billions
df['GDP'] = df['GDP'].str.replace('$', '').str.replace(',', '').str.replace('B', '')
df['GDP'] = df['GDP'].astype(float) * 1000000000

# Convert to integers
df['GDP'] = df['GDP'].astype(int)

df = df.sort_values('Year')

# Display basic statistics
print(df.describe())

# Pairplot to visualize relationships
sns.pairplot(df, x_vars=['Year', 'GDP per Capita'], y_vars=['GDP', 'Growth'])
plt.show()

# Correlation heatmap
sns.heatmap(df.corr(), annot=True)
plt.show()

# Assuming 'growth' is your target variable
X = df[['Year', 'GDP', 'GDP per Capita']]
y = df['Growth']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

X_test = X_test.sort_values('Year')
print(sorted(X['Year']))

model = LinearRegression()
model.fit(X_train, y_train)

# Print coefficients
print("Coefficients:", model.coef_)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate and print metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print('Mean Squared Error:', mse)
print('Root Mean Squared Error:', rmse)
print('Mean Absolute Error:', mae)
print('R-squared:', r2)

print("Accuracy :",(1 - abs(r2_score(y_test, y_pred)))*100)

# Scatter plot with regression line for 'year' vs 'growth'
plt.plot(X_test['Year'],y_test, color='blue', label='Actual')
plt.scatter(X_test['Year'],y_pred, color='red', label='Predicted')
plt.xlabel('Year')
plt.ylabel('Growth')
plt.title('Regression Analysis: Year vs Growth')
plt.legend()
plt.show()

# Assuming 'y_pred' contains predictions from your chosen model
plt.plot(X_test['Year'], y_test, label='Actual')
plt.plot(X_test['Year'], y_pred, color='red', label='Predicted')
plt.xlabel('Year')
plt.ylabel('Growth')
plt.title('Regression Analysis: Year vs Growth')
plt.legend()
plt.show()

sns.pairplot(df, x_vars=['Year', 'GDP', 'GDP per Capita'], y_vars=['Growth'])
plt.show()

plt.plot(df['Year'], df['Growth'])
plt.xlabel('Year')
plt.ylabel('Growth')
plt.title('Growth Over Time')
plt.show()

"""# For Future predictions for Growth"""

X_new = X_train[['Year']]  # Assuming df_train is your training DataFrame

model = LinearRegression()
model.fit(X_new, y_train)  # Assuming y_train is your target variable

X_test_new = X_test[['Year']]   # Assuming df_test is your testing DataFrame

y_pred = model.predict(X_test_new)

y_train_gdp = X_train['GDP']

"""# For Future predictions for GDP"""

model_gdp = LinearRegression()
model_gdp.fit(X_new, y_train_gdp)  # Assuming y_train is your target variable

y_pred_gdp = model_gdp.predict(X_test_new)

fig, axs = plt.subplots(1, 2, figsize=(10, 5))

# Plot the first plot
axs[0].plot(X_test_new,y_pred, color='red', label='Predicted')
axs[0].set_xlabel('Year')
axs[0].set_ylabel('Growth')
axs[0].set_title('Regression Analysis: Year vs Growth')
axs[0].legend()

# Plot the second plot
axs[1].plot(X_test_new,y_pred_gdp, color='green', label='Predicted')
axs[1].set_xlabel('Year')
axs[1].set_ylabel('GDP')
axs[1].set_title('Regression Analysis: Year vs GDP')
axs[1].legend()

# Display the plots
plt.tight_layout()
plt.show()

future_years = pd.DataFrame({'Year': range(df['Year'].max() + 1, 2031)})

future_predictions = model.predict(future_years)
future_predictions_gdp = model_gdp.predict(future_years)

# Create a figure and a set of subplots
fig, axs = plt.subplots(1, 2, figsize=(10, 5))

# Plot the first plot
axs[0].plot(future_years['Year'], future_predictions, color='red', label='Future Predictions')
axs[0].set_xlabel('Year')
axs[0].set_ylabel('Growth')
axs[0].set_title('Future Growth Predictions')
axs[0].legend()

# Plot the second plot
axs[1].plot(future_years['Year'], future_predictions_gdp, color='green', label='Future Predictions')
axs[1].set_xlabel('Year')
axs[1].set_ylabel('GDP')
axs[1].set_title('Future GDP Predictions')
axs[1].legend()

# Display the plots
plt.tight_layout()
plt.show()


